{"version":3,"sources":["components/topbar.js","components/product.js","components/products.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","react_default","a","createElement","Navbar","Header","Brand","src","style","width","marginTop","height","Nav","pullRight","NavItem","eventKey","href","Component","Product","Panel","Heading","Title","componentClass","this","props","produto","nome","Body","ListGroup","ListGroupItem","categoria","fabricante","situacao","Products","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","products","setState","id","codigoDeBarras","Col","md","product","key","Grid","map","renderCard","Home","topbar","App","className","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA2BeA,mLApBX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAOC,OAAR,KACEJ,EAAAC,EAAAC,cAACC,EAAA,EAAOE,MAAR,KACAL,EAAAC,EAAAC,cAAA,OAAKI,IAAI,cAAcC,MAAO,CAACC,MAAM,IAAKC,WAAY,EAAGC,OAAQ,QAInEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKC,WAAS,GACZZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,SAAU,EAAGC,KAAK,KAA3B,mBAZSC,mFC0BNC,mLA1BX,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACgB,EAAA,EAAMC,QAAP,KACAnB,EAAAC,EAAAC,cAACgB,EAAA,EAAME,MAAP,CAAaC,eAAe,MAA5B,IAAmCC,KAAKC,MAAMC,QAAQC,KAAtD,MAKAzB,EAAAC,EAAAC,cAACgB,EAAA,EAAMQ,KAAP,KACE1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACE3B,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,KAAgBN,KAAKC,MAAMC,QAAQK,YAGtC7B,EAAAC,EAAAC,cAAA,wBAAgBoB,KAAKC,MAAMC,QAAQM,YACnC9B,EAAAC,EAAAC,cAAA,6BAAeoB,KAAKC,MAAMC,QAAQO,oBAjBvBf,aCkCPgB,cA/Bb,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAZ,KAAAU,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhB,KAAMC,KAEDgB,MAAQ,CACXC,SAAU,IAJKP,2LASjBX,KAAKmB,SAAS,CAAED,SAAS,CACvB,CAACE,GAAI,EAAGjB,KAAM,QAASkB,eAAgB,KAAMb,WAAY,UAAWC,SAAU,aAAaF,UAAY,mJAIlGL,GACT,OAAOxB,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAKC,GAAI,GAAT,IAAa7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAStB,QAASA,EAASuB,IAAKvB,EAAQkB,KAArD,sCAKL,OACE1C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KAEG1B,KAAKiB,MAAMC,SAASS,IAAI3B,KAAK4B,oBAzBflC,aCWRmC,mLATX,OACEnD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACsC,EAAD,cALWxB,aCUJqC,mLARX,OACErD,EAAAC,EAAAC,cAAA,OAAKoD,UAAU,OACbtD,EAAAC,EAAAC,cAACqD,EAAD,cAJUvC,aCQEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98602fbc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\n\n\n \nclass TopBar extends Component {\n  render () {\n    return (\n      <div>\n        <Navbar>\n          <Navbar.Header>\n            <Navbar.Brand>\n            <img src='cpharma.png' style={{width:100, marginTop: -7, height: 35}} />\n            </Navbar.Brand>\n          </Navbar.Header>\n\n          <Nav pullRight>\n            <NavItem eventKey={1} href=\"#\">\n              Login\n            </NavItem>\n          </Nav>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default TopBar;","import React, { Component} from 'react';\nimport { Panel,ListGroup,ListGroupItem } from 'react-bootstrap';\n\nclass Product extends Component {\n  render() {\n    return (\n      <div>\n        <Panel>\n          <Panel.Heading>\n          <Panel.Title componentClass=\"h3\"> {this.props.produto.nome} </Panel.Title>\n            \n          \n          \n          </Panel.Heading>\n          <Panel.Body>\n            <ListGroup>\n              <ListGroupItem>{this.props.produto.categoria}</ListGroupItem>\n            </ListGroup>\n\n           <p>Fabricante: {this.props.produto.fabricante}</p>\n           <p> Situação: {this.props.produto.situacao}</p>\n\n\n\n          </Panel.Body>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nexport default Product;","import React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-bootstrap';\nimport Product from './product';\n\nclass Products extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      products: []\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({ products:[\n      {id: 1, nome: 'Talco', codigoDeBarras: 1234, fabricante: 'Johnson', situacao: 'Disponivel',categoria : 'Higiene'}] });\n\n  }\n\nrenderCard(produto){\n  return <Col md={3}> <Product produto={produto} key={produto.id} /> </Col>\n}\n\n\n  render() {\n    return (\n      <Grid>\n\n        {this.state.products.map(this.renderCard)}\n        \n        </Grid>\n        \n    );\n  }\n}\n\nexport default Products;\n","import React, { Component } from 'react';\nimport TopBar from './topbar';\nimport Products from './products';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <TopBar />\n        <Products />\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './components/home';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}